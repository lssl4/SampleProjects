#BlueJ class context
comment0.params=
comment0.target=Collage()
comment0.text=\n\ Construct\ a\ new\ Collage\ object.\n\ This\ method\ constructs\ an\ Arraylist\ of\ Fragment\ class\ for\ the\ varialbe\ collage\n
comment1.params=f
comment1.target=void\ addFragment(Fragment)
comment1.text=\n\ Add\ a\ new\ Fragment\ (line)\ to\ the\ collage.\n\ @param\ f\ Fragment\ to\ add\n\ this\ method\ adds\ a\ fragment\ of\ class\ Fragment\ to\ the\ collage\ arraylist\n
comment10.params=
comment10.target=int\ maxY()
comment10.text=\n\ Find\ largest\ y\ position\ in\ the\ collage,\ assuming\ that\ the\ Collage\ has\ at\ least\ one\ Fragment.\n\ @return\ int\ maximum\ y-value\ of\ any\ Fragment\n
comment11.params=
comment11.target=void\ removeRandom()
comment11.text=\n\ Choose\ any\ one\ of\ the\ fragments\ in\ the\ collage\ at\ random\ and\ remove\ it\ from\ the\ collage.\n
comment12.params=key
comment12.target=int\ countKeys(java.lang.String)
comment12.text=\n\ Count\ number\ of\ images\ whose\ keywords\ include\ the\ substring\ key.\n\ @param\ key\ String,\ the\ substring\ to\ search\ for\n\ @return\ count\ int\ of\ number\ of\ qualifying\ images\n
comment13.params=key
comment13.target=Fragment\ findFragment(java.lang.String)
comment13.text=\n\ Find\ a\ Fragment\ whose\ name\ includes\ key.\ \n\ This\ method\ could\ be\ used\ e.g.\ to\ select\ colors\ for\ making\ tile\ pictures.\n\ Optional\ extension\:\ return\ any\ one\ of\ the\ matching\ fragments\ chosen\ at\ random,\ not\ just\ the\ first\ one.\n\ @param\ key\ String\ to\ search\ for\ \n\ @return\ Fragment\ the\ first\ that\ matches\ this\ key\n
comment14.params=
comment14.target=java.lang.String\ getAllKeywords()
comment14.text=\ \n\ Make\ a\ newline\ separated\ string\ of\ all\ keywords\ in\ the\ collage\ excluding\ any\ duplicates.\n\ Optional\ extension\:\ use\ substrings\ of\ keywords\ when\ searching\ for\ duplicates\ (and\ write\ JUnit\ test\ cases\ for\ that)\n\ @return\ String\ of\ Fragment\ keywords\n
comment15.params=
comment15.target=java.lang.String\ toString()
comment15.text=\n\ Generate\ a\ human\ readable\ summary\ of\ the\ features\ of\ the\ collage.\n\ Format\ the\ string\ as\ you\ wish\ with\ your\ own\ choice\ of\ information.\ \ \n\ e.g.\ you\ can\ include\ information\ such\ as\ the\ number\ of\ Fragments,\ \n\ bounding\ box\ co-ordinates,\ and\ keywords\ used.\n\ @return\ String\ summarising\ the\ features\ of\ the\ collage.\n
comment2.params=i
comment2.target=Fragment\ getFragment(int)
comment2.text=\n\ Get\ the\ Fragment\ at\ position\ i.\n\ @param\ \ i\ \ int\ the\ position\ of\ the\ Fragment\ object\n\ @return\ Fragment\ object\ at\ position\ i\n
comment3.params=
comment3.target=int\ numberOfFragments()
comment3.text=\n\ Get\ the\ size\ of\ the\ collage.\n\ @return\ \ int\ the\ number\ of\ Fragments\ in\ the\ Collage\n
comment4.params=xDelta\ yDelta
comment4.target=void\ move(int,\ int)
comment4.text=\n\ Move\ every\ fragment\ in\ the\ collage\ by\ a\ given\ amount.\n\ @param\ xDelta\ int\ pixels\ of\ horizontal\ move\n\ @param\ yDelta\ int\ pixels\ of\ vertical\ move\n
comment5.params=tileWidth\ tileHeight
comment5.target=void\ makeTiles(int,\ int)
comment5.text=\n\ Set\ every\ fragment\ in\ the\ collage\ to\ have\ size\ tileWidth\ by\ tileHeight.\n\ @param\ tileWidth\ new\ int\ x-size\ for\ the\ Fragment\n\ @param\ tileHeight\ new\ int\ y-size\ for\ the\ Fragment\n
comment6.params=scale
comment6.target=void\ explode(double)
comment6.text=\n\ Scale\ the\ collage\ (relative\ to\ 0,0)\ by\ moving\ each\ image\ to\ a\ new\ position\ and\ scaling\ the\ image\ size.\ \n\ @param\ scale\ double\ where\ less\ than\ one\ means\ shrink\ and\ more\ than\ one\ means\ expand\ the\ collage\n
comment7.params=
comment7.target=int\ minX()
comment7.text=\n\ Find\ smallest\ x\ position\ in\ the\ collage,\ assuming\ that\ the\ Collage\ has\ at\ least\ one\ Fragment.\n\ @return\ int\ minimum\ x-value\ of\ any\ Fragment\n
comment8.params=
comment8.target=int\ minY()
comment8.text=\n\ Find\ smallest\ y\ position\ in\ the\ collage,\ assuming\ that\ the\ Collage\ has\ at\ least\ one\ Fragment.\n\ @return\ int\ minimum\ y-value\ of\ any\ Fragment\n
comment9.params=
comment9.target=int\ maxX()
comment9.text=\n\ Find\ largest\ x\ position\ in\ the\ collage,\ assuming\ that\ the\ Collage\ has\ at\ least\ one\ Fragment.\n\ @return\ int\ maximum\ x-value\ of\ any\ Fragment\n
numComments=16
