#BlueJ class context
comment0.params=n\ inp
comment0.target=NgramModel(int,\ java.lang.String)
comment0.text=\ \n\ Create\ an\ n-gram\ frequency\ model\ for\ an\ input\ string\n\ ngrams\ at\ the\ end\ of\ the\ string\ wrap\ to\ the\ front\n\ e.g.\ "abbbbc"\ includes\ "bca"\ and\ "cab"\ in\ its\ 3-grams\n\ @param\ int\ n\ size\ of\ n-grams\ to\ create\n\ @param\ String\ inp\ input\ string\ to\ be\ modelled\n
comment1.params=inp
comment1.target=NgramModel(java.lang.String)
comment1.text=\ \n\ default\ constructor\ generates\ model\ for\ ngrams\ of\ size\ 1\n
comment2.params=
comment2.target=java.util.HashMap\ getDictionary()
comment2.text=\n\ @return\ HashMap<String,Integer>\ the\ ngram\ dictionary\ with\ word\ frequencies\n
comment3.params=
comment3.target=int\ getAlphabetSize()
comment3.text=\n\ @return\ int\ the\ size\ of\ the\ alphabet\ of\ a\ given\ input\n
comment4.params=
comment4.target=int\ getNumWords()
comment4.text=\n\ @return\ int\ the\ total\ number\ of\ ngram\ words\ counted\ in\ the\ model\n
comment5.params=freq
comment5.target=java.util.ArrayList\ getTopWords(int)
comment5.text=\n\ Make\ list\ of\ all\ words\ with\ frequency\ at\ least\ freq\n\ @param\ freq\ int\ lower\ frequency\ limit\ for\ returned\ words\n\ @return\ ArrayList\ all\ words\ with\ frequency\ more\ than\ freq\n
comment6.params=
comment6.target=java.lang.String\ toString()
comment6.text=\n\ @return\ String\ representation\ of\ the\ ngram\ model\n
numComments=7
